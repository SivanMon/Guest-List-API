name: Build and Test API (Local DynamoDB)

on:
  push:
    branches:
      - main
      - dev
      - staging
      - '*-feature'   # gili-feature, dvir-feature, sivan-feature, sahar-feature, etc.
  pull_request:
    branches:
      - main
      - dev
      - staging

env:
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_NAME: guestlistapi

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    # Start DynamoDB Local as a service (no AWS needed)
    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd="curl -s http://localhost:8000/shell/ || exit 0"
          --health-interval=5s --health-timeout=2s --health-retries=20

    env:
      AWS_REGION: us-east-1
      DDB_ENDPOINT_URL: http://localhost:8000
      DDB_TABLE: guests-ci-${{ github.run_id }}

    steps:
      # ======== SETUP ========
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Ensure jq and awscli are available
        run: |
          sudo apt-get update
          sudo apt-get install -y jq awscli

      - name: Create image tag
        id: tags
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          COMMIT_SHA=${GITHUB_SHA::7}
          DATE=$(date +%Y%m%d-%H%M%S)
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g')
          TAG="${CLEAN_BRANCH}-${DATE}-${COMMIT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "clean_branch=${CLEAN_BRANCH}" >> $GITHUB_OUTPUT
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "latest_tag=latest" >> $GITHUB_OUTPUT
          fi

      # ======== BUILD ========
      - name: Build Docker image (test tag)
        run: |
          echo "Building image $DOCKERHUB_USER/$IMAGE_NAME:test"
          docker build -t $DOCKERHUB_USER/$IMAGE_NAME:test .

      # ======== DDB LOCAL SETUP ========
      - name: Create DynamoDB table (local)
        run: |
          aws configure set region "$AWS_REGION"
          aws dynamodb create-table \
            --table-name "$DDB_TABLE" \
            --attribute-definitions AttributeName=seq_num,AttributeType=S \
            --key-schema AttributeName=seq_num,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --endpoint-url "$DDB_ENDPOINT_URL"

          echo "Waiting for local table to be ready..."
          # local doesn't support 'wait', so do a lightweight poll
          for i in {1..20}; do
            aws dynamodb list-tables --endpoint-url "$DDB_ENDPOINT_URL" | grep -q "$DDB_TABLE" && break
            sleep 1
          done
          aws dynamodb describe-table --table-name "$DDB_TABLE" --endpoint-url "$DDB_ENDPOINT_URL"

      # ======== TEST ========
      - name: Start API container (wired to local DynamoDB)
        run: |
          docker run -d \
            --name guestlist-test \
            -p 1111:1111 \
            -e AWS_REGION="$AWS_REGION" \
            -e DDB_TABLE="$DDB_TABLE" \
            -e DDB_ENDPOINT_URL="$DDB_ENDPOINT_URL" \
            $DOCKERHUB_USER/$IMAGE_NAME:test

          echo "Waiting for app to start..."
          for i in {1..40}; do
            curl -fsS http://127.0.0.1:1111/health && break
            sleep 1
          done

          if ! curl -fsS http://127.0.0.1:1111/health >/dev/null; then
            echo "App did not become healthy in time:"
            docker logs guestlist-test
            exit 1
          fi

      - name: Check /api (debug)
        run: curl -fsS http://127.0.0.1:1111/api || true

      - name: Test GET /guests
        run: |
          echo "Testing GET /guests..."
          http_code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:1111/guests)
          if [ "$http_code" = "200" ]; then
            echo "✓ GET /guests passed"
          else
            echo "✗ GET /guests failed (HTTP $http_code)"
            docker logs guestlist-test
            exit 1
          fi

      - name: Test POST /guests
        id: post
        run: |
          echo "Testing POST /guests..."
          TEST_ID="111111111"
          response=$(curl -s -w "\n%{http_code}" -X POST http://127.0.0.1:1111/guests \
            -H "Content-Type: application/json" \
            -d '{
              "firstname": "CI",
              "surname": "Test",
              "quantity": "2",
              "phone": "0541234567",
              "email": "ci@test.com",
              "id": "'${TEST_ID}'"
            }')

          http_code=$(echo "$response" | tail -1)
          body=$(echo "$response" | head -n -1)

          if [ "$http_code" = "201" ] || [ "$http_code" = "200" ]; then
            echo "✓ POST /guests passed"
            seq_num=$(echo "$body" | jq -r '.guest.seq_num // empty')
            if [ -z "$seq_num" ]; then
              echo "Could not parse seq_num from response:"
              echo "$body"
              exit 1
            fi
            echo "seq_num=$seq_num" >> "$GITHUB_OUTPUT"
          else
            echo "✗ POST /guests failed (HTTP $http_code)"
            echo "Response: $body"
            docker logs guestlist-test
            exit 1
          fi

      - name: Test GET /guests/{id}
        run: |
          SEQ='${{ steps.post.outputs.seq_num }}'
          echo "Testing GET /guests/$SEQ"
          http_code=$(curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1:1111/guests/$SEQ")
          if [ "$http_code" = "200" ]; then
            echo "✓ GET /guests/$SEQ passed"
          else
            echo "✗ GET /guests/$SEQ failed (HTTP $http_code)"
            exit 1
          fi

      - name: Test DELETE /guests/{id}
        run: |
          SEQ='${{ steps.post.outputs.seq_num }}'
          echo "Testing DELETE /guests/$SEQ"
          http_code=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "http://127.0.0.1:1111/guests/$SEQ")
          if [ "$http_code" = "200" ] || [ "$http_code" = "204" ]; then
            echo "✓ DELETE /guests/$SEQ passed"
          else
            echo "✗ DELETE /guests/$SEQ failed (HTTP $http_code)"
            exit 1
          fi

      - name: Stop test container
        if: always()
        run: |
          docker logs guestlist-test || true
          docker stop guestlist-test || true
          docker rm guestlist-test || true

      # ======== PUSH ========
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Push image to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.tag }}
            ${{ steps.tags.outputs.latest_tag && format('{0}/{1}:latest', env.DOCKERHUB_USER, env.IMAGE_NAME) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
